<?xml version="1.0" encoding="utf-8"?>
<!-- Author: Christophe Coenraets, http://coenraets.org -->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				width="100%" height="86" 
				creationComplete="onCreationComplete()" 
				dataChange="onDataChange()"
>
	
	<fx:Script>
		<![CDATA[
			import com.widged.maoriDictionary.word.events.WordEvent;
			import com.widged.maoriDictionary.word.vo.WordItem;
			import com.widged.maoriDictionary.word.vo.WordStyle;
			
			import spark.components.supportClasses.StyleableTextField;

			// class data 
			private var dataChanged : Boolean = true;
			private var oldData:Object;

			// #################################
			// ##   Events, Interaction
			// #################################

			protected function onCreationComplete() : void
			{
				addEventListener(MouseEvent.CLICK, onClick, true);
			}

			private function onDefinitionAreaComplete() : void
			{
				StyleableTextField(definitionArea.textDisplay).styleSheet=WordStyle.css;
				// this seems to prevent the textarea from being scrollable
				definitionArea.heightInLines = NaN;
				commitData();
			}
			
			private function onDataChange() : void
			{
				dataChanged = true;
				commitData();
			}
			
			protected function onClick(event:MouseEvent) : void
			{
				dispatchEvent( new WordEvent( WordEvent.WORD_SELECT, data.wordItem, true ) );
			}
			
			// #################################
			// ##  View
			// #################################
			/**
			 * Commit any change to the word item data. 
			 * 
			 * Update any view element that displays word item information.  
			 */
			/* :NOTE: invalidate/commit is a way to achieve binding but in a more lightweight fashion */
			private function commitData():void
			{
				if(data && oldData && data.wid == oldData.wid) { return; }
				// let's not refresh the view until all elements are on stage
				if(!definitionArea || !wordLabel || !indiceLabel || !indiceBox) { return; }

				// let's refresh the view only after data changed. 
				if(dataChanged = false) { return; } 
				dataChanged = false;

				var item:WordItem = new WordItem(data.word, data.wid, data.indice, data.definition);
				data.wordItem = item;
				// definitionArea
				rowBackgound.color = itemIndex % 2 ? 0xFFFFFF : 0xEFEFEF;
				definitionArea.setStyle("contentBackgroundColor", rowBackgound.color);
				StyleableTextField(definitionArea.textDisplay).htmlText = item.toHtml(item.definitionShort);
				definitionArea.scrollToRange(0,0);
				// wordLabel
				wordLabel.text =item.displayName;
				// indiceBox and label
				indiceBox.visible = item.indice && item.indice.length ? true : false;
				indiceLabel.text = item.indice;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
	</fx:Declarations>
		<s:Rect top="0" bottom="0" left="0" right="0">
			<s:fill>
				<s:SolidColor id="rowBackgound" />
			</s:fill>
		</s:Rect>
	
		<s:Label 
			id="wordLabel" 
			top="15" 
			left="20" right="64" 
			maxDisplayedLines="1" 
			fontSize="16"
			creationComplete="commitData()"
		/>
		<s:TextArea 
			id="definitionArea"
			top="33" bottom="3" left="12" right="64" 
			creationComplete="onDefinitionAreaComplete();" 
			borderVisible="false" contentBackgroundAlpha="0" 
			fontSize="11" color="#808080" 
			verticalAlign="top" 
			editable="false" selectable="true" 
		/>
	
	<s:Group 
		id="indiceBox" 
		width="30" height="24" top="33" right="21"
		>
		<s:Rect top="0" bottom="0" right="0" left="0" >
			<s:stroke>
				<s:SolidColorStroke color="#DDDDDD" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#FFFFFF" />
			</s:fill>
		</s:Rect>
		<s:Rect top="3" bottom="3" left="3" right="3">
			<s:fill>
				<s:SolidColor color="#F2F2F2" />
			</s:fill>
		</s:Rect>
		<s:Label 
			id="indiceLabel" 
			verticalCenter="0" horizontalCenter="0" 
			creationComplete="commitData()"
			color="#808080" fontSize="12"
			/>
	</s:Group>
	
	
	<!--
	<s:Line bottom="1" left="0" right="0">
		<s:stroke>
			<s:SolidColorStroke color="#CFCFCF"	weight="1" alpha="1"/>
		</s:stroke>
	</s:Line>
	<s:Line bottom="0" left="0" right="0">
		<s:stroke>
			<s:SolidColorStroke color="#EFEFEF"	weight="1" alpha="1"/>
		</s:stroke>
	</s:Line>
-->	
</s:ItemRenderer>
