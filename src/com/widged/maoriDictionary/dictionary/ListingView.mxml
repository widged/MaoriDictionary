<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="WordListing" 
		viewDeactivate="onDeactivate(event)"
		dataChange="onDataChange()" 
		xmlns:azScroller="com.widged.maoriDictionary.azScroller.*" 
>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:navigationContent>
		<s:Button icon="@Embed('embed/pix/icon_information.png')"  
				  click="onInfoClick();"/>
	</s:navigationContent>	
	<s:titleContent>
		<s:TextInput id="key" width="100%"/>
	</s:titleContent>
	<s:actionContent>
		<s:Button icon="@Embed('embed/pix/icon_magnify_glass.png')"  
				  click="onSearchClick()" /> 
	</s:actionContent>		
	<fx:Script>
		<![CDATA[
			import com.widged.maoriDictionary.dictionary.vo.MaoriDictionary;
			import com.widged.events.DataObjectEvent;
			import com.widged.io.events.ProviderErrorEvent;
			import com.widged.io.events.ProviderResultEvent;
			import com.widged.maoriDictionary.framework.events.FrameworkDispatcher;
			import com.widged.maoriDictionary.framework.events.FrameworkEvent;
			import com.widged.maoriDictionary.word.WordPopup;
			import com.widged.maoriDictionary.word.events.WordEvent;
			import com.widged.maoriDictionary.word.vo.WordItem;
			
			import mx.collections.ArrayList;
			
			import spark.events.ViewNavigatorEvent;

			// central event bus
			private var frameworkDispatcher : FrameworkDispatcher;
			// helpers
			private var dictionary:MaoriDictionary;
			// data binding
			private var dataChanged:Boolean = false;

			// #################################
			// ##   Events, Interaction
			// #################################
			

			private function onDataChange():void
			{
				dataChanged = true;
				dictionary = data ?  data.dictionary : null;
				if(dictionary)
				{
					addEventListener(WordEvent.WORD_SELECT, onWordSelection);
					dictionary.addEventListener(ProviderResultEvent.RESULT, onProviderResult);
					dictionary.addEventListener(ProviderErrorEvent.FAULT,  onProviderFault);
				}
				if(!data.arrayList) {
					loadLetterData(); 
				} 
				else
				{
					commitList();
				}
				commitLetter();
			}

			private function onDeactivate(event:ViewNavigatorEvent):void
			{
				data.vscroll = listing.scroller.verticalScrollBar.value; 
				letterScroller.removeEventListener(ScrollerAZ.LETTER_POINTER_CHANGE, onLetterPointerChange);
				dictionary.removeEventListener(ProviderResultEvent.RESULT, onProviderResult);
				dictionary.removeEventListener(ProviderErrorEvent.FAULT,  onProviderFault);
			}
			
			private function onInfoClick():void
			{
				frameworkDispatcher ||= FrameworkDispatcher.getInstance();	
				frameworkDispatcher.dispatchEvent(new FrameworkEvent(FrameworkEvent.INFO_SELECT));
			}
			
			
			private function onSearchClick():void
			{
				// search provider for  key.text
				if(!dictionary) { return; }
				data.arrayList = null;
				dictionary.listWordsForSearchKey(key.text);
			}
			
			private function onLetterPointerChange(event:DataObjectEvent):void
			{
				data.arrayList = null;
				data.letter = event.data.letter;
				commitLetter();
				loadLetterData(); 
			}
			
			private function onProviderResult(event:ProviderResultEvent):void
			{
				var list:Array = event.result;
				data.arrayList = new ArrayList(list);
				dataChanged = true;
				commitList();
			}
			
			private function onProviderFault(event:ProviderErrorEvent):void
			{
				trace("[ListingView.onProviderFault]", event.msg);
			}
			


			// #################################
			// ##  View
			// #################################
			
			private function commitList():void
			{
				if(!listing) { return; }
				if(!dataChanged) { return; }
				dataChanged = false;
				listing.dataProvider  = data ? data.arrayList as ArrayList : null;;
			}

			private function commitScroll():void
			{
				if(!listing) { return; }
				listing.scroller.verticalScrollBar.value = data ? data.vscroll as int : 0;
			}
			
			private function loadLetterData():void
			{
				if(!data.letter) { data.letter = ScrollerAZ.FIRST_LETTER; }
				if(!dictionary) { return; }
				dictionary.listWordsForLetter(data.letter, 0);
			}
			
			
			private function commitLetter():void
			{
				if(!letterScroller) { return; }
				letterScroller.selectedLetter = data.letter; 
				letterScroller.addEventListener(ScrollerAZ.LETTER_POINTER_CHANGE, onLetterPointerChange);
			}

			// #################################
			// ##  Word selection
			// #################################
			
			private var wordPopup:WordPopup;
			private function onWordSelection(event:WordEvent):void
			{
				trace("[ListingView.onWordSelection]");
				event.stopPropagation();
				wordPopup = new WordPopup();
				wordPopup.height = this.height;
				wordPopup.width = this.width;
				wordPopup.item = event.data as WordItem;
				wordPopup.addEventListener(WordEvent.WORD_CLOSE, onWordClose);
				// wordPopup.open(this, true);
				this.addElement(wordPopup);
			}
			
			private function onWordClose(event:WordEvent):void
			{
				removeEventListener(WordEvent.WORD_CLOSE, onWordClose);
				wordPopup.visible = wordPopup.includeInLayout = false;
			}				
			
		]]>
	</fx:Script>
	
	<s:List id="listing" 
			top="30" bottom="0" left="0" right="0" 
			itemRenderer="com.widged.maoriDictionary.word.renderers.WordRenderer" 
			useVirtualLayout="true" 
			initialize="commitList();" creationComplete="commitScroll();" 
	/>
	<azScroller:ScrollerAZ
		id="letterScroller"
		height="36" top="0" left="0" right="0" backgroundAlpha="0" creationComplete="commitLetter()" 
		/>
	
</s:View>
