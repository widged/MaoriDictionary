<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:datagrid="com.widged.ui.mobileGrid.*" 
>
    
    <fx:Script>
        <![CDATA[
			import com.widged.events.DataObjectEvent;
			import com.widged.media.image.frames.CompletionTick;
			import com.widged.ui.mobileGrid.events.MobileGridEvent;
            
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            
            public function initializeData(columnList:Array, rowList:Array):void
            {
                gridColumns.dataProvider = this.headerColumns.dataProvider = new ArrayCollection(columnList);
                dg.columns = columnList;
                dg.dataProvider = new ArrayCollection(rowList);
                dg.verticalScrollPosition = 0;
                dg.addEventListener(MobileGridEvent.ITEM_CLICK, onItemClick);
            }
            
            private function onItemClick(event:DataObjectEvent):void
            {
                event.stopPropagation();
                event.preventDefault();
                dispatchEvent(new MobileGridEvent(MobileGridEvent.ITEM_CLICK, event.data));
            }
            
            
        ]]>
    </fx:Script>
    
    <!-- column separator -->
    <s:DataGroup id="headerColumns"
                 top="0" left="0" height="27"
                 itemRenderer="com.widged.ui.mobileGrid.MobileGridHeaderColumnRenderer" >
        <s:layout>
            <s:HorizontalLayout paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" gap="0" useVirtualLayout="false"/>
        </s:layout>
    </s:DataGroup>

    
        <!-- 
        By using a datagroup instead of a datagrid, we are removing a lot of functionality from the grid that is rarely used in mobile applications like "dragging" columns to resize them. 
        With a datagroup, we get more control over touch functionality and gestures, while keeping the 'weight' of the grid low to give a good user experience.
        http://stackoverflow.com/questions/5980623/datagrids-on-flex-mobile.
        
        It also gives more flexibility for targetting multiple devices, thanks to the layout property - http://polygeek.com/2718_flex_experimenting-with-datagroup-custom-layouts
        For information on useVirtualization, check http://www.anujgakhar.com/2010/08/02/flex-4-understanding-datagroups-and-virtuallayouts/
        -->
    <datagrid:MobileGridBody id="dg"
                 top="27" left="0" height="27"
                 itemRenderer="com.widged.ui.mobileGrid.MobileGridRowRenderer" >
        <datagrid:layout>
            <s:VerticalLayout paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" gap="0" useVirtualLayout="false"/>
        </datagrid:layout>
    </datagrid:MobileGridBody>
    
    <!--
        <datagrid:MobileGridBody id="dg"
                                top="0" left="0" right="0" bottom="0"
                                itemRenderer="com.widged.ui.mobileGrid.MobileGridRowRenderer" click="onGridClick()" >
            <datagrid:layout>
                <s:VerticalLayout paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" gap="0" useVirtualLayout="false"/>
            </datagrid:layout>
        </datagrid:MobileGridBody>
    -->

    <!-- column separator -->
    <s:DataGroup id="gridColumns"
                 top="{headerColumns.height}" left="0" right="0" bottom="0"
                 itemRenderer="com.widged.ui.mobileGrid.MobileGridColumnSeparatorRenderer">
        <s:layout>
            <s:HorizontalLayout paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" gap="0" useVirtualLayout="false"/>
        </s:layout>
    </s:DataGroup>

    

</s:SkinnableContainer>